<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RayG</title>
    <link>https://ray-g.github.io/</link>
    <description>Recent content on RayG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jun 2018 21:23:29 +0800</lastBuildDate>
    
	<atom:link href="https://ray-g.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jupyter Notebook Shortcuts</title>
      <link>https://ray-g.github.io/others/jupyter-notebook-shortcuts/</link>
      <pubDate>Thu, 21 Jun 2018 21:23:29 +0800</pubDate>
      
      <guid>https://ray-g.github.io/others/jupyter-notebook-shortcuts/</guid>
      <description> Jupyter Notebook has 2 Modes: Edit Mode and Command Mode.
NOTE: If you are in Edit Mode, there is a pencil at the upper-right.
Switch between modes Enter to enter Edit Mode from Command Mode
ESC to return Command Mode from Edit Mode
Show and edit shortcuts Shortcuts can be show by Help -&amp;gt; Keyboard Shortcuts
And the shortcuts is also editable Help -&amp;gt; Edit Keyboard Shortcuts
Default Shortcuts Shortcuts in Command Mode    Key Action     F find and replace   Ctrl-Shift-F open the command palette   Ctrl-Shift-P open the command palette   P open the command palette   Enter Enter Edit Mode   Ctrl-Enter run selected cells   Shift-Enter run cell and select below   Alt-Enter run cell and insert below   Y change cell to code   M change cell to markdown   R change cell to raw   1 change cell to heading 1   2 change cell to heading 2   3 change cell to heading 3   4 change cell to heading 4   5 change cell to heading 5   6 change cell to heading 6   Shift-Space scroll notebook up   Space scroll nobebook down   K select cell above   Up select cell above   J select cell below   Down select cell below   Shift-K extend selected cells above   Shift-Up extend selected cells above   Shift-J extend selected cells below   Shift-Down extend selected cells below   A insert cell above   B insert cell below   X cut selected cells   C copy selected cells   V paste cells below   Shift-V paste cells above   Z undo cell deletion   D, D delete selected cells   Shift-M merge selected cells, or current cell with cell below if only one cell is selected   Ctrl-S save and checkpoint   S save and checkpoint   L toggle line numbers   Shift-L toggles line numbers in all cells, and persist the setting   O toggle output of selected cells   Shift-O toggle output scrolling of selected cells   H show keyboard shorcuts   I, I interrupt the kernel   0, 0 restart the kernel (with dialog)   Ctrl-V dialog for paste from system clipboard   Esc close the pager   Q close the pager    Shortcuts in Edit Mode    Key Action     Esc enter command mode   Ctrl-M enter command mode   Ctrl-Shift-F open the command palette   Ctrl-Shift-P open the command palette   Ctrl-Enter run selected cells   Alt-Enter run cell and insert below   Shift-Enter run cell and select below   Ctrl-S Save and Checkpoint   Up move cursor up   Down move cursor down   Ctrl-Shift-Minus split cell at cursor   Tab code completion or indent   Shift-Tab tooltip   Ctrl-] indent   Ctrl-[ dedent   Ctrl-A select all   Ctrl-Y redo   Ctrl-Z undo   Ctrl-/ comment   Ctrl-D delete whole line   Ctrl-U undo selection   Alt-U redo selection   Insert toggle overwrite flag   Ctrl-Home go to cell start   Ctrl-Up go to cell start   Ctrl-End go to cell end   Ctrl-Down go to cell end   Ctrl-Left go one word left   Ctrl-Right go one word right   Ctrl-Backspace delete work before   Ctrl-Delete delete work after    </description>
    </item>
    
    <item>
      <title>初学Golang易犯的错误</title>
      <link>https://ray-g.github.io/golang/common-mistakes-for-newbies/</link>
      <pubDate>Tue, 12 Jun 2018 00:26:35 +0800</pubDate>
      
      <guid>https://ray-g.github.io/golang/common-mistakes-for-newbies/</guid>
      <description>Golang是Google推出的面向软件工程的，拥有GC的，高并发的语言。 初学Go的时候很可能犯一些错误，犯错误并不怕，可怕的是一直犯同一个</description>
    </item>
    
    <item>
      <title>机器真的可以学习吗？</title>
      <link>https://ray-g.github.io/machinelearning/is-ml-feasible/</link>
      <pubDate>Mon, 11 Jun 2018 00:26:35 +0800</pubDate>
      
      <guid>https://ray-g.github.io/machinelearning/is-ml-feasible/</guid>
      <description>在讨论机器是否可以学习之前，我们先来看看下面这个问题 什么是学习？ 在课堂上听老师讲课，是进行学习; 自己通过摸索总结得出经验，也是学习; 小朋友通</description>
    </item>
    
    <item>
      <title>Git Snippts</title>
      <link>https://ray-g.github.io/others/git-snippts/</link>
      <pubDate>Mon, 11 Jun 2018 00:05:12 +0800</pubDate>
      
      <guid>https://ray-g.github.io/others/git-snippts/</guid>
      <description> Fetch all submodules after clone From the root of the repo just run:
git submodule update --init  Sync fork # Step 1 clone fork git clone git@github.com:&amp;lt;USERNAME&amp;gt;/&amp;lt;FORK-REPO&amp;gt;.git # Step 2, cd to the repo git remote add upstream git://github.com/ORIGINAL-DEV-USERNAME/REPO-YOU-FORKED-FROM.git git fetch upstream git pull upstream master git push  </description>
    </item>
    
    <item>
      <title>Setting Up The Blog</title>
      <link>https://ray-g.github.io/others/setting-up-the-blog/</link>
      <pubDate>Sun, 10 Jun 2018 13:51:53 +0800</pubDate>
      
      <guid>https://ray-g.github.io/others/setting-up-the-blog/</guid>
      <description>This blog is built with Hugo and hosted on Github.
Setting up Hugo site Install Hugo First we should have a Hugo installed, Install Hugo, or just download the binary from github.com/gohugoio/hugo.
After Hugo installed, try verify it.
$ hugo version Hugo Static Site Generator v0.41 linux/amd64 BuildDate: 2018-05-25T16:57:20Z  Create a New Site Hugo can generate layout of a new site very easy:
$ hugo new site hugo-blog Congratulations!</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ray-g.github.io/about/</link>
      <pubDate>Sun, 10 Jun 2018 12:51:53 +0800</pubDate>
      
      <guid>https://ray-g.github.io/about/</guid>
      <description> Ray Guo, a software engineer as well as a geek.
Previousily focus on C/C++ for many years, then turned into a full-stack engineer. Currently has worked with following technologies:
 C/C++ Golang Python Ruby Shell JavaScript Docker Angular VueJS D3.js TensorFlow Pandas etc.  Archivements Patents  Granted Dynamic call tracking method based on CPU interrupt instructions to improve disassembly quality of indirect calls  </description>
    </item>
    
  </channel>
</rss>