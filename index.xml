<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RayG</title>
    <link>https://ray-g.github.io/</link>
    <description>Recent content on RayG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Dec 2019 20:17:22 +0800</lastBuildDate>
    
	<atom:link href="https://ray-g.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 1.13 defer 变化</title>
      <link>https://ray-g.github.io/golang/golang_1_13_defer/</link>
      <pubDate>Thu, 05 Dec 2019 20:17:22 +0800</pubDate>
      
      <guid>https://ray-g.github.io/golang/golang_1_13_defer/</guid>
      <description>Golang的1.13发布了，在Release Note的Runtime section上提到了defer在多数情况下可以提升30%的性能。 那么</description>
    </item>
    
    <item>
      <title>Setup Kubernetes in China</title>
      <link>https://ray-g.github.io/kubernetes/k8s-in-china/</link>
      <pubDate>Mon, 25 Nov 2019 13:10:55 +0800</pubDate>
      
      <guid>https://ray-g.github.io/kubernetes/k8s-in-china/</guid>
      <description>Setup Minikube minikube start fails on unable to access k8s.gcr.io and etc.
Try using China mirror:
minikube start --registry-mirror=https://registry.docker-cn.com --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --image-mirror-country=&#39;cn&#39;  See the help document of minikube:
minimube start --help # Output: # ... # --image-mirror-country=&#39;&#39;: Country code of the image mirror to be used. Leave empty to use the global one. For # Chinese mainland users, set it to cn. # --image-repository=&#39;&#39;: Alternative image repository to pull docker images from.</description>
    </item>
    
    <item>
      <title>gRPC</title>
      <link>https://ray-g.github.io/architect/grpc_protobuf/</link>
      <pubDate>Fri, 23 Aug 2019 13:12:55 +0800</pubDate>
      
      <guid>https://ray-g.github.io/architect/grpc_protobuf/</guid>
      <description>gRPC是什么 gRPC是Google开源的基于Protobuf的RPC框架。使用了高性能的Protobuf和HTTP/2。 官方定义gRPC是</description>
    </item>
    
    <item>
      <title>Setup Robot Environment With Docker</title>
      <link>https://ray-g.github.io/docker/setup-robot-with-docker/</link>
      <pubDate>Mon, 25 Jun 2018 13:36:11 +0800</pubDate>
      
      <guid>https://ray-g.github.io/docker/setup-robot-with-docker/</guid>
      <description>Robot framework plus selenium is quite suitable for UI automation testing.
But it requires a GUI to open the browser and execute such test suites. Unfortunatly, most of the automation environments are headless servers, even if we can use virtual machines with virtual graphical environemnt, it is quite a performance overhead.
With docker, we can save quite a lot of energy and make the automation quite easy. With the xvfb it is able to execute robot and selenium inside the docker.</description>
    </item>
    
    <item>
      <title>机器学习基本概念</title>
      <link>https://ray-g.github.io/machinelearning/ml-basic-concepts/</link>
      <pubDate>Fri, 22 Jun 2018 20:37:09 +0800</pubDate>
      
      <guid>https://ray-g.github.io/machinelearning/ml-basic-concepts/</guid>
      <description>智能时代的到来 谈到比较火的概念，那么人工智能，深度学习以及区块链等都是最近比较火的关键字。 现如今，我们正处于信息时代之中，各种各样的数据正通</description>
    </item>
    
    <item>
      <title>Jupyter Notebook Shortcuts</title>
      <link>https://ray-g.github.io/others/jupyter-notebook-shortcuts/</link>
      <pubDate>Thu, 21 Jun 2018 21:23:29 +0800</pubDate>
      
      <guid>https://ray-g.github.io/others/jupyter-notebook-shortcuts/</guid>
      <description>Jupyter Notebook has 2 Modes: Edit Mode and Command Mode.
NOTE: If you are in Edit Mode, there is a pencil at the upper-right.
Switch between modes Enter to enter Edit Mode from Command Mode
ESC to return Command Mode from Edit Mode
Show and edit shortcuts Shortcuts can be show by Help -&amp;gt; Keyboard Shortcuts.
And the shortcuts is also editable Help -&amp;gt; Edit Keyboard Shortcuts.
Default Shortcuts Follow are the default shortcuts of both Command Mode and Edit Mode.</description>
    </item>
    
    <item>
      <title>初学Golang易犯的错误</title>
      <link>https://ray-g.github.io/golang/common-mistakes-for-newbies/</link>
      <pubDate>Tue, 12 Jun 2018 00:26:35 +0800</pubDate>
      
      <guid>https://ray-g.github.io/golang/common-mistakes-for-newbies/</guid>
      <description>Golang是Google推出的面向软件工程的，拥有GC的，高并发的语言。 初学Go的时候很可能犯一些错误，犯错误并不怕，可怕的是一直犯同一个</description>
    </item>
    
    <item>
      <title>机器真的可以学习吗？</title>
      <link>https://ray-g.github.io/machinelearning/is-ml-feasible/</link>
      <pubDate>Mon, 11 Jun 2018 00:26:35 +0800</pubDate>
      
      <guid>https://ray-g.github.io/machinelearning/is-ml-feasible/</guid>
      <description>在讨论机器是否可以学习之前，我们先来看看下面这个问题 什么是学习？ 在课堂上听老师讲课，是进行学习; 自己通过摸索总结得出经验，也是学习; 小朋友通</description>
    </item>
    
    <item>
      <title>Git Snippts</title>
      <link>https://ray-g.github.io/others/git-snippts/</link>
      <pubDate>Mon, 11 Jun 2018 00:05:12 +0800</pubDate>
      
      <guid>https://ray-g.github.io/others/git-snippts/</guid>
      <description> Fetch all submodules after clone From the root of the repo just run:
git submodule update --init  Sync fork # Step 1 clone fork git clone git@github.com:&amp;lt;USERNAME&amp;gt;/&amp;lt;FORK-REPO&amp;gt;.git # Step 2, cd to the repo git remote add upstream git://github.com/ORIGINAL-DEV-USERNAME/REPO-YOU-FORKED-FROM.git git fetch upstream git pull upstream master git push  </description>
    </item>
    
    <item>
      <title>Setting Up The Blog</title>
      <link>https://ray-g.github.io/others/setting-up-the-blog/</link>
      <pubDate>Sun, 10 Jun 2018 13:51:53 +0800</pubDate>
      
      <guid>https://ray-g.github.io/others/setting-up-the-blog/</guid>
      <description>This blog is built with Hugo and hosted on Github.
Setting up Hugo site Install Hugo First we should have a Hugo installed, Install Hugo, or just download the binary from github.com/gohugoio/hugo.
After Hugo installed, try verify it.
$ hugo version Hugo Static Site Generator v0.41 linux/amd64 BuildDate: 2018-05-25T16:57:20Z  Create a New Site Hugo can generate layout of a new site very easy:
$ hugo new site hugo-blog Congratulations!</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ray-g.github.io/about/</link>
      <pubDate>Sun, 10 Jun 2018 12:51:53 +0800</pubDate>
      
      <guid>https://ray-g.github.io/about/</guid>
      <description> Ray Guo, a software engineer as well as a geek.
Previousily focus on C/C++ for many years, then turned into a full-stack engineer. Currently has worked with following technologies:
 C/C++ Golang Python Ruby Shell JavaScript Docker Angular VueJS D3.js TensorFlow Pandas etc.  Archivements Patents  Granted Dynamic call tracking method based on CPU interrupt instructions to improve disassembly quality of indirect calls  </description>
    </item>
    
    <item>
      <title>Golang TryLock</title>
      <link>https://ray-g.github.io/golang/golang_trylock/</link>
      <pubDate>Mon, 22 Jan 2018 12:15:33 +0800</pubDate>
      
      <guid>https://ray-g.github.io/golang/golang_trylock/</guid>
      <description>Golang中的锁有sync包中的Mutex和RWMutex。然而Go中的锁实现的比较简单，在没有获取到锁的时候，会被阻塞住，一直等下去。 这</description>
    </item>
    
    <item>
      <title>Golang context</title>
      <link>https://ray-g.github.io/golang/golang_context/</link>
      <pubDate>Wed, 15 Nov 2017 19:53:24 +0800</pubDate>
      
      <guid>https://ray-g.github.io/golang/golang_context/</guid>
      <description>Context背景 随着微服务的发展，大家在写服务的各种响应函数的时候，一定都是将Context作为第一个参数， 很多情况下是为了进行全链路追踪</description>
    </item>
    
    <item>
      <title>Golang defer</title>
      <link>https://ray-g.github.io/golang/golang_defer/</link>
      <pubDate>Mon, 06 Nov 2017 21:27:32 +0800</pubDate>
      
      <guid>https://ray-g.github.io/golang/golang_defer/</guid>
      <description>作用 延迟调用 被defer的函数调用会延迟到当前函数结束的时候再进行调用，defer调用完毕后，函数的返回值才会被返回给上一级调用者。 比如这样</description>
    </item>
    
    <item>
      <title>Golang slice</title>
      <link>https://ray-g.github.io/golang/golang_slice/</link>
      <pubDate>Tue, 24 Oct 2017 14:54:12 +0800</pubDate>
      
      <guid>https://ray-g.github.io/golang/golang_slice/</guid>
      <description>数组与切片 Golang中语言自带的线性数据结构有数组(Array)和切片(Slice)。 其中数组是有固定长度的由特定类型的元素组成的序列。 因</description>
    </item>
    
    <item>
      <title>Golang string</title>
      <link>https://ray-g.github.io/golang/golang_string/</link>
      <pubDate>Fri, 13 Oct 2017 11:12:33 +0800</pubDate>
      
      <guid>https://ray-g.github.io/golang/golang_string/</guid>
      <description>字符串的本质 Golang中的string，实际是一个不可变的字节序列，每个字节都是UTF-8编码的文本。 虽然每一个字符串都有长度，但是这个长</description>
    </item>
    
    <item>
      <title>Database基本知识整理</title>
      <link>https://ray-g.github.io/database/database_base_knowledge/</link>
      <pubDate>Wed, 11 Oct 2017 10:06:15 +0800</pubDate>
      
      <guid>https://ray-g.github.io/database/database_base_knowledge/</guid>
      <description>事务 Transaction 事务是之满足ACID特性的一组操作，可以Commit提交一个事务，也可以Rollback回滚所提交的事务。 stateDiagram State_1 --&amp;gt; Intermediate_State : insert, update, delete Intermediate_State --&amp;gt; State_2 : commit Intermediate_State</description>
    </item>
    
    <item>
      <title>Development Snippts</title>
      <link>https://ray-g.github.io/others/develop_sniipts/</link>
      <pubDate>Thu, 02 Mar 2017 23:21:36 +0800</pubDate>
      
      <guid>https://ray-g.github.io/others/develop_sniipts/</guid>
      <description>Patch File Build Patch Linux: diff -Naur /path/to/original /path/to/modified &amp;gt; aaa.patch，这样就可以生成名字为aaa.patch的文件了 Windoes: 可以通过版本工具来创建，比如TortoiseSVN之</description>
    </item>
    
  </channel>
</rss>